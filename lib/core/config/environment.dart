import 'package:flutter/foundation.dart';

/// Enumera√ß√£o dos ambientes dispon√≠veis
enum Environment { development, staging, production }

/// Configura√ß√£o ambiental da aplica√ß√£o
class EnvironmentConfig {
  static Environment get current {
    const envString = String.fromEnvironment(
      'ENV',
      defaultValue: 'development',
    );
    switch (envString) {
      case 'staging':
        return Environment.staging;
      case 'production':
        return Environment.production;
      default:
        return Environment.development;
    }
  }

  /// Configura o ambiente da aplica√ß√£o
  static Future<void> configure() async {
    // Log usando debugPrint ao inv√©s de print para evitar warnings
    debugPrint('üåç Configurando ambiente: ${current.name}');

    switch (current) {
      case Environment.development:
        await _configureDevelopment();
      case Environment.staging:
        await _configureStaging();
      case Environment.production:
        await _configureProduction();
    }

    debugPrint('‚úÖ Ambiente ${current.name} configurado com sucesso');
  }

  /// Configura√ß√µes espec√≠ficas de desenvolvimento
  static Future<void> _configureDevelopment() async {
    debugPrint('üîß Configurando ambiente de desenvolvimento...');
    // Limpar cache para in√≠cio limpo em desenvolvimento
    // Configura√ß√µes espec√≠ficas de dev ser√£o implementadas aqui
  }

  /// Configura√ß√µes espec√≠ficas de staging
  static Future<void> _configureStaging() async {
    debugPrint('üé≠ Configurando ambiente de staging...');
    // Configura√ß√µes de staging
  }

  /// Configura√ß√µes espec√≠ficas de produ√ß√£o
  static Future<void> _configureProduction() async {
    debugPrint('üöÄ Configurando ambiente de produ√ß√£o...');
    // Configura√ß√µes de produ√ß√£o
    // Desabilitar logs debug, etc.
  }
}
